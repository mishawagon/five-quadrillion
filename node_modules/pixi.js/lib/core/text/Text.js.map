{"version":3,"sources":["../../../src/core/text/Text.js"],"names":["defaultDestroyOptions","texture","children","baseTexture","Text","text","style","canvas","document","createElement","width","height","fromCanvas","orig","trim","context","getContext","resolution","RESOLUTION","_text","_style","_styleListener","_font","localStyleID","updateText","respectDirty","styleID","dirty","getFontStyle","font","outputText","wordWrap","lines","split","lineWidths","Array","length","maxLineWidth","fontProperties","calculateFontProperties","i","lineWidth","measureText","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","ceil","padding","lineHeight","fontSize","scale","clearRect","strokeStyle","stroke","textBaseline","lineJoin","miterLimit","linePositionX","linePositionY","dropShadowBlur","shadowColor","dropShadowColor","shadowBlur","fillStyle","xShadowOffset","cos","dropShadowAngle","yShadowOffset","sin","ascent","align","fill","drawLetterSpacing","_generateFillStyle","updateTexture","x","y","isStroke","strokeText","fillText","characters","String","prototype","call","currentPosition","index","current","_texture","hasLoaded","realWidth","realHeight","_frame","_onTextureUpdate","emit","renderWebGL","renderer","_renderCanvas","result","wordWrapWidth","spaceLeft","words","j","wordWidth","breakWords","c","characterWidth","wordWidthWithSpace","_calculateBounds","calculateVertices","_bounds","addQuad","vertexData","_onStyleChange","isArray","navigator","isCocoonJS","gradient","totalIterations","currentIteration","stop","fillGradientType","LINEAR_VERTICAL","createLinearGradient","addColorStop","destroy","options","Object","assign","fontSizeString","fontFamilies","fontFamily","test","fontStyle","fontVariant","fontWeight","join","fontPropertiesCache","properties","fontPropertiesCanvas","fontPropertiesContext","baseline","fillRect","imagedata","getImageData","data","pixels","line","idx","descent","abs","value","s","_width","_height"],"mappings":"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","file":"Text.js","sourcesContent":["/* eslint max-depth: [2, 8] */\nimport Sprite from '../sprites/Sprite';\nimport Texture from '../textures/Texture';\nimport { Rectangle } from '../math';\nimport { sign } from '../utils';\nimport { TEXT_GRADIENT } from '../const';\nimport settings from '../settings';\nimport TextStyle from './TextStyle';\n\nconst defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text. To split a line you can use '\\n' in your text string,\n * or add a wordWrap property set to true and and wordWrapWidth property with a value in the style object.\n *\n * A Text can be created directly from a string and a style object\n *\n * ```js\n * let text = new PIXI.Text('This is a pixi text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport default class Text extends Sprite\n{\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text, style, canvas)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.fromCanvas(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {HTMLCanvasElement}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas. This is set automatically by the renderer.\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = settings.RESOLUTION;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text and updates it when needed.\n     *\n     * @private\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = Text.getFontStyle(style);\n\n        this.context.font = this._font;\n\n        // word wrap\n        // preserve original text\n        const outputText = style.wordWrap ? this.wordWrap(this._text) : this._text;\n\n        // split text into lines\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n\n        // calculate text width\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n        const fontProperties = Text.calculateFontProperties(this._font);\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = this.context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        this.canvas.width = Math.ceil((width + (style.padding * 2)) * this.resolution);\n\n        // calculate text height\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * lineHeight);\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        this.canvas.height = Math.ceil((height + (style.padding * 2)) * this.resolution);\n\n        this.context.scale(this.resolution, this.resolution);\n\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.context.font = this._font;\n        this.context.strokeStyle = style.stroke;\n        this.context.lineWidth = style.strokeThickness;\n        this.context.textBaseline = style.textBaseline;\n        this.context.lineJoin = style.lineJoin;\n        this.context.miterLimit = style.miterLimit;\n\n        let linePositionX;\n        let linePositionY;\n\n        if (style.dropShadow)\n        {\n            if (style.dropShadowBlur > 0)\n            {\n                this.context.shadowColor = style.dropShadowColor;\n                this.context.shadowBlur = style.dropShadowBlur;\n            }\n            else\n            {\n                this.context.fillStyle = style.dropShadowColor;\n            }\n\n            const xShadowOffset = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n            const yShadowOffset = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding\n                    );\n\n                    if (style.stroke && style.strokeThickness)\n                    {\n                        this.context.strokeStyle = style.dropShadowColor;\n                        this.drawLetterSpacing(\n                            lines[i],\n                            linePositionX + xShadowOffset + style.padding, linePositionY + yShadowOffset + style.padding,\n                            true\n                        );\n                        this.context.strokeStyle = style.stroke;\n                    }\n                }\n            }\n        }\n\n        // set canvas text styles\n        this.context.fillStyle = this._generateFillStyle(style, lines);\n\n        // draw lines line by line\n        for (let i = 0; i < lines.length; i++)\n        {\n            linePositionX = style.strokeThickness / 2;\n            linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n            if (style.align === 'right')\n            {\n                linePositionX += maxLineWidth - lineWidths[i];\n            }\n            else if (style.align === 'center')\n            {\n                linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n            }\n\n            if (style.stroke && style.strokeThickness)\n            {\n                this.drawLetterSpacing(lines[i], linePositionX + style.padding, linePositionY + style.padding, true);\n            }\n\n            if (style.fill)\n            {\n                this.drawLetterSpacing(lines[i], linePositionX + style.padding, linePositionY + style.padding);\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    drawLetterSpacing(text, x, y, isStroke = false)\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        const characters = String.prototype.split.call(text, '');\n        let currentPosition = x;\n        let index = 0;\n        let current = '';\n\n        while (index < text.length)\n        {\n            current = characters[index++];\n            if (isStroke)\n            {\n                this.context.strokeText(current, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(current, currentPosition, y);\n            }\n            currentPosition += this.context.measureText(current).width + letterSpacing;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        const texture = this._texture;\n        const style = this._style;\n\n        texture.baseTexture.hasLoaded = true;\n        texture.baseTexture.resolution = this.resolution;\n\n        texture.baseTexture.realWidth = this.canvas.width;\n        texture.baseTexture.realHeight = this.canvas.height;\n        texture.baseTexture.width = this.canvas.width / this.resolution;\n        texture.baseTexture.height = this.canvas.height / this.resolution;\n        texture.trim.width = texture._frame.width = this.canvas.width / this.resolution;\n        texture.trim.height = texture._frame.height = this.canvas.height / this.resolution;\n\n        texture.trim.x = -style.padding;\n        texture.trim.y = -style.padding;\n\n        texture.orig.width = texture._frame.width - (style.padding * 2);\n        texture.orig.height = texture._frame.height - (style.padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        texture.baseTexture.emit('update', texture.baseTexture);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.WebGLRenderer} renderer - The renderer\n     */\n    renderWebGL(renderer)\n    {\n        if (this.resolution !== renderer.resolution)\n        {\n            this.resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super.renderWebGL(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer)\n    {\n        if (this.resolution !== renderer.resolution)\n        {\n            this.resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @return {string} New string with new lines applied where required\n     */\n    wordWrap(text)\n    {\n        // Greedy wrapping algorithm that will wrap words as the line grows longer\n        // than its horizontal bounds.\n        let result = '';\n        const style = this._style;\n        const lines = text.split('\\n');\n        const wordWrapWidth = style.wordWrapWidth;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            let spaceLeft = wordWrapWidth;\n            const words = lines[i].split(' ');\n\n            for (let j = 0; j < words.length; j++)\n            {\n                const wordWidth = this.context.measureText(words[j]).width;\n\n                if (style.breakWords && wordWidth > wordWrapWidth)\n                {\n                    // Word should be split in the middle\n                    const characters = words[j].split('');\n\n                    for (let c = 0; c < characters.length; c++)\n                    {\n                        const characterWidth = this.context.measureText(characters[c]).width;\n\n                        if (characterWidth > spaceLeft)\n                        {\n                            result += `\\n${characters[c]}`;\n                            spaceLeft = wordWrapWidth - characterWidth;\n                        }\n                        else\n                        {\n                            if (c === 0)\n                            {\n                                result += ' ';\n                            }\n\n                            result += characters[c];\n                            spaceLeft -= characterWidth;\n                        }\n                    }\n                }\n                else\n                {\n                    const wordWidthWithSpace = wordWidth + this.context.measureText(' ').width;\n\n                    if (j === 0 || wordWidthWithSpace > spaceLeft)\n                    {\n                        // Skip printing the newline if it's the first word of the line that is\n                        // greater than the word wrap width.\n                        if (j > 0)\n                        {\n                            result += '\\n';\n                        }\n                        result += words[j];\n                        spaceLeft = wordWrapWidth - wordWidth;\n                    }\n                    else\n                    {\n                        spaceLeft -= wordWidthWithSpace;\n                        result += ` ${words[j]}`;\n                    }\n                }\n            }\n\n            if (i < lines.length - 1)\n            {\n                result += '\\n';\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     */\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Method to be called upon a TextStyle change.\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    _generateFillStyle(style, lines)\n    {\n        if (!Array.isArray(style.fill))\n        {\n            return style.fill;\n        }\n\n        // cocoon on canvas+ cannot generate textures, so use the first colour instead\n        if (navigator.isCocoonJS)\n        {\n            return style.fill[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient;\n        let totalIterations;\n        let currentIteration;\n        let stop;\n\n        const width = this.canvas.width / this.resolution;\n        const height = this.canvas.height / this.resolution;\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            totalIterations = (style.fill.length + 1) * lines.length;\n            currentIteration = 0;\n            for (let i = 0; i < lines.length; i++)\n            {\n                currentIteration += 1;\n                for (let j = 0; j < style.fill.length; j++)\n                {\n                    stop = (currentIteration / totalIterations);\n                    gradient.addColorStop(stop, style.fill[j]);\n                    currentIteration++;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            totalIterations = style.fill.length + 1;\n            currentIteration = 1;\n\n            for (let i = 0; i < style.fill.length; i++)\n            {\n                stop = currentIteration / totalIterations;\n                gradient.addColorStop(stop, style.fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majorety of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text || ' ');\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * Generates a font style string to use for Text.calculateFontProperties(). Takes the same parameter\n     * as Text.style.\n     *\n     * @static\n     * @param {object|TextStyle} style - String representing the style of the font\n     * @return {string} Font style string, for passing to Text.calculateFontProperties()\n     */\n    static getFontStyle(style)\n    {\n        style = style || {};\n\n        if (!(style instanceof TextStyle))\n        {\n            style = new TextStyle(style);\n        }\n\n        // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n        const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = style.fontFamily;\n\n        if (!Array.isArray(style.fontFamily))\n        {\n            fontFamilies = style.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily))\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given fontStyle\n     *\n     * @static\n     * @param {string} fontStyle - String representing the style of the font\n     * @return {Object} Font properties object\n     */\n    static calculateFontProperties(fontStyle)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (Text.fontPropertiesCache[fontStyle])\n        {\n            return Text.fontPropertiesCache[fontStyle];\n        }\n\n        const properties = {};\n\n        const canvas = Text.fontPropertiesCanvas;\n        const context = Text.fontPropertiesContext;\n\n        context.font = fontStyle;\n\n        const width = Math.ceil(context.measureText('|MÉq').width);\n        let baseline = Math.ceil(context.measureText('M').width);\n        const height = 2 * baseline;\n\n        baseline = baseline * 1.4 | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = fontStyle;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText('|MÉq', 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        Text.fontPropertiesCache[fontStyle] = properties;\n\n        return properties;\n    }\n}\n\nText.fontPropertiesCache = {};\nText.fontPropertiesCanvas = document.createElement('canvas');\nText.fontPropertiesContext = Text.fontPropertiesCanvas.getContext('2d');\n"]}