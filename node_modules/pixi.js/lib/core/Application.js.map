{"version":3,"sources":["../../src/core/Application.js"],"names":["Application","width","height","options","noWebGL","renderer","stage","ticker","add","render","start","stop","destroy","removeView","remove","view"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;IAkBqBA,W;AAEjB;;;;;;;;;;;;AAYA,uBAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,OAApC,EACA;AAAA;;AACI;;;;AAIA,SAAKC,QAAL,GAAgB,4CAAmBJ,KAAnB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2CC,OAA3C,CAAhB;;AAEA;;;;AAIA,SAAKE,KAAL,GAAa,yBAAb;;AAEA;;;;AAIA,SAAKC,MAAL,GAAc,sBAAd;;AAEA,SAAKA,MAAL,CAAYC,GAAZ,CAAgB,KAAKC,MAArB,EAA6B,IAA7B;;AAEA;AACA,SAAKC,KAAL;AACH;;AAED;;;;;wBAGAD,M,qBACA;AACI,SAAKJ,QAAL,CAAcI,MAAd,CAAqB,KAAKH,KAA1B;AACH,G;;AAED;;;;;wBAGAK,I,mBACA;AACI,SAAKJ,MAAL,CAAYI,IAAZ;AACH,G;;AAED;;;;;wBAGAD,K,oBACA;AACI,SAAKH,MAAL,CAAYG,KAAZ;AACH,G;;AAED;;;;;;;AAUA;;;;wBAIAE,O,oBAAQC,U,EACR;AACI,SAAKF,IAAL;AACA,SAAKJ,MAAL,CAAYO,MAAZ,CAAmB,KAAKL,MAAxB,EAAgC,IAAhC;AACA,SAAKF,MAAL,GAAc,IAAd;;AAEA,SAAKD,KAAL,CAAWM,OAAX;AACA,SAAKN,KAAL,GAAa,IAAb;;AAEA,SAAKD,QAAL,CAAcO,OAAd,CAAsBC,UAAtB;AACA,SAAKR,QAAL,GAAgB,IAAhB;AACH,G;;;;wBAnBD;AACI,aAAO,KAAKA,QAAL,CAAcU,IAArB;AACH;;;;;;kBAxEgBf,W","file":"Application.js","sourcesContent":["import { autoDetectRenderer } from './autoDetectRenderer';\nimport Container from './display/Container';\nimport Ticker from './ticker/Ticker';\n\n/**\n * Convenience class to create a new PIXI application.\n * This class automatically creates the renderer, ticker\n * and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.fromImage('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nexport default class Application\n{\n    /**\n     * @param {number} [width=800] - the width of the renderers view\n     * @param {number} [height=600] - the height of the renderers view\n     * @param {object} [options] - The optional renderer parameters\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n     *      need to call toDataUrl on the webgl context\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2\n     * @param {boolean} [noWebGL=false] - prevents selection of WebGL renderer, even if such is present\n     */\n    constructor(width, height, options, noWebGL)\n    {\n        /**\n         * WebGL renderer if available, otherwise CanvasRenderer\n         * @member {PIXI.WebGLRenderer|PIXI.CanvasRenderer}\n         */\n        this.renderer = autoDetectRenderer(width, height, options, noWebGL);\n\n        /**\n         * The root display container that's renderered.\n         * @member {PIXI.Container}\n         */\n        this.stage = new Container();\n\n        /**\n         * Ticker for doing render updates.\n         * @member {PIXI.ticker.Ticker}\n         */\n        this.ticker = new Ticker();\n\n        this.ticker.add(this.render, this);\n\n        // Start the rendering\n        this.start();\n    }\n\n    /**\n     * Render the current stage.\n     */\n    render()\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Convenience method for stopping the render.\n     */\n    stop()\n    {\n        this.ticker.stop();\n    }\n\n    /**\n     * Convenience method for starting the render.\n     */\n    start()\n    {\n        this.ticker.start();\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view()\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] Automatically remove canvas from DOM.\n     */\n    destroy(removeView)\n    {\n        this.stop();\n        this.ticker.remove(this.render, this);\n        this.ticker = null;\n\n        this.stage.destroy();\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n"]}