{"version":3,"sources":["../../src/loaders/bitmapFontParser.js"],"names":["parse","bitmapFontParser","resource","next","data","type","TYPE","XML","getElementsByTagName","length","getAttribute","xmlUrl","isDataUrl","path","dirname","url","baseUrl","charAt","replace","textureUrl","TextureCache","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","metadata","imageMetadata","parentResource","add","name","res","texture","info","common","font","size","parseInt","lineHeight","chars","letters","i","charCode","textureRect","frame","x","y","xOffset","yOffset","xAdvance","kerning","baseTexture","kernings","first","second","amount","bitmapFont","fonts"],"mappings":";;;QAKgBA,K,GAAAA,K;;kBAyDD,YACf;AACI,WAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,IAApC,EACP;AACI;AACA,YAAI,CAACD,SAASE,IAAV,IAAkBF,SAASG,IAAT,KAAkB,yBAASC,IAAT,CAAcC,GAAtD,EACA;AACIJ;;AAEA;AACH;;AAED;AACA,YAAID,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2CC,MAA3C,KAAsD,CAAtD,IACGP,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2CC,MAA3C,KAAsD,CADzD,IAEGP,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,EAA8CE,YAA9C,CAA2D,MAA3D,MAAuE,IAF9E,EAIA;AACIP;;AAEA;AACH;;AAED,YAAIQ,SAAS,CAACT,SAASU,SAAV,GAAsBC,KAAKC,OAAL,CAAaZ,SAASa,GAAtB,CAAtB,GAAmD,EAAhE;;AAEA,YAAIb,SAASU,SAAb,EACA;AACI,gBAAID,WAAW,GAAf,EACA;AACIA,yBAAS,EAAT;AACH;;AAED,gBAAI,KAAKK,OAAL,IAAgBL,MAApB,EACA;AACI;AACA,oBAAI,KAAKK,OAAL,CAAaC,MAAb,CAAoB,KAAKD,OAAL,CAAaP,MAAb,GAAsB,CAA1C,MAAiD,GAArD,EACA;AACIE,8BAAU,GAAV;AACH;;AAED;AACAA,yBAASA,OAAOO,OAAP,CAAe,KAAKF,OAApB,EAA6B,EAA7B,CAAT;AACH;AACJ;;AAED;AACA,YAAIL,UAAUA,OAAOM,MAAP,CAAcN,OAAOF,MAAP,GAAgB,CAA9B,MAAqC,GAAnD,EACA;AACIE,sBAAU,GAAV;AACH;;AAED,YAAMQ,aAAaR,SAAST,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,EAA8CE,YAA9C,CAA2D,MAA3D,CAA5B;;AAEA,YAAI,YAAMU,YAAN,CAAmBD,UAAnB,CAAJ,EACA;AACI;AACAnB,kBAAME,QAAN,EAAgB,YAAMkB,YAAN,CAAmBD,UAAnB,CAAhB;AACAhB;AACH,SALD,MAOA;AACI,gBAAMkB,cAAc;AAChBC,6BAAapB,SAASoB,WADN;AAEhBC,0BAAU,yBAASC,SAAT,CAAmBC,KAFb;AAGhBC,0BAAUxB,SAASwB,QAAT,CAAkBC,aAHZ;AAIhBC,gCAAgB1B;AAJA,aAApB;;AAOA;AACA,iBAAK2B,GAAL,CAAY3B,SAAS4B,IAArB,aAAmCX,UAAnC,EAA+CE,WAA/C,EAA4D,UAACU,GAAD,EAC5D;AACI/B,sBAAME,QAAN,EAAgB6B,IAAIC,OAApB;AACA7B;AACH,aAJD;AAKH;AACJ,KAzED;AA0EH,C;;AA1ID;;IAAYU,I;;AACZ;;AACA;;AACA;;;;AAEO,SAASb,KAAT,CAAeE,QAAf,EAAyB8B,OAAzB,EACP;AACI,QAAM5B,OAAO,EAAb;AACA,QAAM6B,OAAO/B,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,CAAb;AACA,QAAM0B,SAAShC,SAASE,IAAT,CAAcI,oBAAd,CAAmC,QAAnC,EAA6C,CAA7C,CAAf;;AAEAJ,SAAK+B,IAAL,GAAYF,KAAKvB,YAAL,CAAkB,MAAlB,CAAZ;AACAN,SAAKgC,IAAL,GAAYC,SAASJ,KAAKvB,YAAL,CAAkB,MAAlB,CAAT,EAAoC,EAApC,CAAZ;AACAN,SAAKkC,UAAL,GAAkBD,SAASH,OAAOxB,YAAP,CAAoB,YAApB,CAAT,EAA4C,EAA5C,CAAlB;AACAN,SAAKmC,KAAL,GAAa,EAAb;;AAEA;AACA,QAAMC,UAAUtC,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,CAAhB;;AAEA,SAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAID,QAAQ/B,MAA5B,EAAoCgC,GAApC,EACA;AACI,YAAMC,WAAWL,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,IAAxB,CAAT,EAAwC,EAAxC,CAAjB;;AAEA,YAAMiC,cAAc,oBAChBN,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,GAAxB,CAAT,EAAuC,EAAvC,IAA6CsB,QAAQY,KAAR,CAAcC,CAD3C,EAEhBR,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,GAAxB,CAAT,EAAuC,EAAvC,IAA6CsB,QAAQY,KAAR,CAAcE,CAF3C,EAGhBT,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,OAAxB,CAAT,EAA2C,EAA3C,CAHgB,EAIhB2B,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,QAAxB,CAAT,EAA4C,EAA5C,CAJgB,CAApB;;AAOAN,aAAKmC,KAAL,CAAWG,QAAX,IAAuB;AACnBK,qBAASV,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,SAAxB,CAAT,EAA6C,EAA7C,CADU;AAEnBsC,qBAASX,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,SAAxB,CAAT,EAA6C,EAA7C,CAFU;AAGnBuC,sBAAUZ,SAASG,QAAQC,CAAR,EAAW/B,YAAX,CAAwB,UAAxB,CAAT,EAA8C,EAA9C,CAHS;AAInBwC,qBAAS,EAJU;AAKnBlB,qBAAS,kBAAYA,QAAQmB,WAApB,EAAiCR,WAAjC;;AALU,SAAvB;AAQH;;AAED;AACA,QAAMS,WAAWlD,SAASE,IAAT,CAAcI,oBAAd,CAAmC,SAAnC,CAAjB;;AAEA,SAAK,IAAIiC,KAAI,CAAb,EAAgBA,KAAIW,SAAS3C,MAA7B,EAAqCgC,IAArC,EACA;AACI,YAAMY,QAAQhB,SAASe,SAASX,EAAT,EAAY/B,YAAZ,CAAyB,OAAzB,CAAT,EAA4C,EAA5C,CAAd;AACA,YAAM4C,SAASjB,SAASe,SAASX,EAAT,EAAY/B,YAAZ,CAAyB,QAAzB,CAAT,EAA6C,EAA7C,CAAf;AACA,YAAM6C,SAASlB,SAASe,SAASX,EAAT,EAAY/B,YAAZ,CAAyB,QAAzB,CAAT,EAA6C,EAA7C,CAAf;;AAEA,YAAIN,KAAKmC,KAAL,CAAWe,MAAX,CAAJ,EACA;AACIlD,iBAAKmC,KAAL,CAAWe,MAAX,EAAmBJ,OAAnB,CAA2BG,KAA3B,IAAoCE,MAApC;AACH;AACJ;;AAEDrD,aAASsD,UAAT,GAAsBpD,IAAtB;;AAEA;AACA;AACA,uBAAWqD,KAAX,CAAiBrD,KAAK+B,IAAtB,IAA8B/B,IAA9B;AACH","file":"bitmapFontParser.js","sourcesContent":["import * as path from 'path';\nimport { Rectangle, Texture, utils } from '../core';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\nexport function parse(resource, texture)\n{\n    const data = {};\n    const info = resource.data.getElementsByTagName('info')[0];\n    const common = resource.data.getElementsByTagName('common')[0];\n\n    data.font = info.getAttribute('face');\n    data.size = parseInt(info.getAttribute('size'), 10);\n    data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n    data.chars = {};\n\n    // parse letters\n    const letters = resource.data.getElementsByTagName('char');\n\n    for (let i = 0; i < letters.length; i++)\n    {\n        const charCode = parseInt(letters[i].getAttribute('id'), 10);\n\n        const textureRect = new Rectangle(\n            parseInt(letters[i].getAttribute('x'), 10) + texture.frame.x,\n            parseInt(letters[i].getAttribute('y'), 10) + texture.frame.y,\n            parseInt(letters[i].getAttribute('width'), 10),\n            parseInt(letters[i].getAttribute('height'), 10)\n        );\n\n        data.chars[charCode] = {\n            xOffset: parseInt(letters[i].getAttribute('xoffset'), 10),\n            yOffset: parseInt(letters[i].getAttribute('yoffset'), 10),\n            xAdvance: parseInt(letters[i].getAttribute('xadvance'), 10),\n            kerning: {},\n            texture: new Texture(texture.baseTexture, textureRect),\n\n        };\n    }\n\n    // parse kernings\n    const kernings = resource.data.getElementsByTagName('kerning');\n\n    for (let i = 0; i < kernings.length; i++)\n    {\n        const first = parseInt(kernings[i].getAttribute('first'), 10);\n        const second = parseInt(kernings[i].getAttribute('second'), 10);\n        const amount = parseInt(kernings[i].getAttribute('amount'), 10);\n\n        if (data.chars[second])\n        {\n            data.chars[second].kerning[first] = amount;\n        }\n    }\n\n    resource.bitmapFont = data;\n\n    // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n    // but it's very likely to change\n    BitmapText.fonts[data.font] = data;\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n\n                // remove baseUrl from xmlUrl\n                xmlUrl = xmlUrl.replace(this.baseUrl, '');\n            }\n        }\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');\n\n        if (utils.TextureCache[textureUrl])\n        {\n            // reuse existing texture\n            parse(resource, utils.TextureCache[textureUrl]);\n            next();\n        }\n        else\n        {\n            const loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                loadType: Resource.LOAD_TYPE.IMAGE,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource,\n            };\n\n            // load the texture for the font\n            this.add(`${resource.name}_image`, textureUrl, loadOptions, (res) =>\n            {\n                parse(resource, res.texture);\n                next();\n            });\n        }\n    };\n}\n"]}